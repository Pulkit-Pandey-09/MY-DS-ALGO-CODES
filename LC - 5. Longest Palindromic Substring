// took reference from - 
//https://leetcode.com/problems/longest-palindromic-substring/discuss/1245748/C%2B%2B-Clean-Top-Down
class Solution {
public:
    
    bool check(string &s, int i, int j, vector<int> &ans, int dp[1001][1001])
    {
        if(dp[i][j] != -1) return dp[i][j];
        if(i >= j) return dp[i][j] = true;
        
        bool found = false;
        if(s[i] == s[j] && check(s, i+1, j-1, ans, dp))
            found = true;
        
        check(s, i+1, j, ans, dp);
        check(s, i, j-1, ans, dp);
        
        if(found && (j-i+1) > ans[2])
        {
            ans[0] = i;
            ans[1] = j;
            ans[2] = j-i+1;
        }
        dp[i][j] = found;
        return found;
    }
    
    string longestPalindrome(string s) 
    {
        vector<int>ans = {0,0,1};
        //vector<vector<int>> dp(1001,vector<int>(1001,-1));
        int dp[1001][1001];
        memset(dp, -1, sizeof(dp));
        check(s, 0, s.size()-1, ans, dp);
        return s.substr(ans[0],ans[2]);
    }
};
