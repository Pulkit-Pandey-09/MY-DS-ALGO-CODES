class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        priority_queue<pair<int, char>> pq;
 
        if (a > 0)
            pq.push({a, 'a'});
        if (b > 0)
            pq.push({b, 'b'});
        if (c > 0)
            pq.push({c, 'c'});
 
        string res;
 
        while(!pq.empty())
        {
            auto ptr1 = pq.top();
            pq.pop();
 
            if (ptr1.first >= 2)
            {
                res += ptr1.second;
                res += ptr1.second;
                ptr1.first -= 2;
            }
            else
            {
                res += ptr1.second;
                ptr1.first -= 1;
            }
 
            if (pq.empty()) break;
 
            auto ptr2 = pq.top();
            pq.pop();
 
            if (ptr2.first >= 2 && ptr2.first >= ptr1.first)
            {
                res += ptr2.second;
                res += ptr2.second;
                ptr2.first -= 2;
            }
            else
            {
                res += ptr2.second;
                ptr2.first -= 1;
            }
 
            if (ptr1.first > 0)
                pq.push(ptr1);
 
            if (ptr2.first > 0)
                pq.push(ptr2);
        }
        return res;
    }
};
