0/1 Knapsack Problem (with top down dp)
#include <bits/stdc++.h>
using namespace std;
 
 
int knapsack(int n, int w, vector<int> &weight, vector<int> &value, int i,vector<vector<int>> &dp)
{
    if(i >= n || w == 0) return 0;
    if(dp[i][w] != -1) return dp[i][w];
    int incl = 0;
    int exl = 0;
 
    if(w-weight[i] >= 0)
    {
        incl = value[i] + knapsack(n,w-weight[i],weight,value,i+1,dp);
    }
    exl = knapsack(n,w,weight,value,i+1,dp);
 
    return dp[i][w] = max(incl,exl);
}
 
int main()
{
    int n , w;
    cin >> n >> w;
    vector<int> weight;
    vector<int> value;
    int wgt , val;
    for(int i = 0; i < n; i++)
    {
        cin >> wgt;
        weight.push_back(wgt);
    }
	for(int i = 0; i < n; i++)
    {
        cin >> val;
        value.push_back(val);
    }
    vector<vector<int>> dp(1001,vector<int>(1001,-1));
    int ans = knapsack(n,w,weight,value,0,dp);
    cout << ans;
}
