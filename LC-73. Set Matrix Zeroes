// Approach 1 
/ time compplexity - O(m*n)
// space - O(m+n);
 
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) 
    {
        vector<bool> rows(matrix.size(),false);
        vector<bool> cols(matrix[0].size(),false);
 
        for(int i = 0; i < matrix.size(); i++)
        {
            for(int j = 0; j < matrix[0].size(); j++)
            {
                if(matrix[i][j] == 0)
                {
                    rows[i] = true;
                    cols[j] = true;
                }
            }
        }
 
        for(int i = 0; i < matrix.size(); i++)
        {
            for(int j = 0; j < matrix[0].size(); j++)
            {
                if(rows[i] == true || cols[j] == true)
                {
                    matrix[i][j] = 0;
                }
            }
        }
    }
};
 
// Approach 2
// time compplexity - O(m*n)
// space - O(1);
class Solution{
    public:
 
    void setZeroes(vector<vector<int>>& matrix) 
    {
        int m = matrix.size();
        int n = matrix[0].size();
        bool col = false;
        for(int i = 0; i < m; i++)    // for 1st col
        {
            if(!matrix[i][0]) col = true;
        }
 
        for(int i = 1; i < n; i++)  // for 0th row
        {
            if(!matrix[0][i]) matrix[0][0] = 0;
        }
 
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(!matrix[i][j]) 
                {
                    matrix[i][0] = 0; 
                    matrix[0][j] = 0;
                }
            }
        }
 
        for(int i = m-1; i >= 0; i--)
        {
            for(int j = n-1; j >= 0; j--)
            {
                if(j == 0) 
                {
                    col == true ? matrix[i][j] = 0 :matrix[i][j] ;
                }
                else if(!matrix[i][0] || !matrix[0][j])
                {
                    matrix[i][j] = 0;
                }
            }
        }
 
    }
 
};
