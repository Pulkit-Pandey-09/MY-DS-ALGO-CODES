class Solution {
public:
    // not my code
    int dp[9][1<<14];
    int solve(int step, int mask, int n, vector<int>&nums)
    {
        if(dp[step][mask] != -1) return dp[step][mask];
        if(mask == (1<<n)-1) return 0;
        int ans = 0;
        for(int i = 0; i < n; ++i)
        {
            if(mask&(1<<i)) continue;
            for(int j = i+1; j < n; ++j)
            {
                if(mask&(1<<j)) continue;
                ans = max(ans, step*gcd(nums[i], nums[j]) + solve(step+1, (mask|(1<<i)|(1<<j)), n, nums));
            }
        }
        return dp[step][mask] = ans;
    }
    int maxScore(vector<int>& nums) 
    {
        int n = nums.size();
        memset(dp, -1, sizeof(dp));
        return solve(1, 0, n, nums);
    }
};
