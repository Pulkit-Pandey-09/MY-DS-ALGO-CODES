class Solution {
public:
    
    vector<vector<int>> offSet = {{1,0}, {-1,0}, {0,1}, {0,-1}};
    
    bool okay(vector<vector<char>>& grid, vector<vector<int>>& visited, int r, int c, int i, int j)
    {
        return i < 0 || i >= r || j < 0 || j >= c || visited[i][j] == 1 || grid[i][j] == 'X' ? false : true;
    }
    
    int bfs(vector<vector<char>>& grid, int r, int c, int i, int j)
    {
        queue<pair<int,int>> q;
        vector<vector<int>> visited(r, vector<int>(c, -1));
        q.push(make_pair(i,j));
        visited[i][j] = 1;
        int level = 0;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                pair<int, int> p = q.front();
                q.pop();
                if(grid[p.first][p.second] == '#')
                {
                    return level;
                }
                for(int m = 0; m < 4; m++)
                {
                    int idx = p.first + offSet[m][0];
                    int idy = p.second + offSet[m][1];
                    if(okay(grid, visited, r, c, idx, idy))
                    {
                        //cout << idx << " " << idy << endl;
                        q.push(make_pair(idx, idy));
                        visited[idx][idy] = 1;
                    }
                }
            }
            level++;
        }
        return -1;
    }
    
    int getFood(vector<vector<char>>& grid) 
    {
        int r = grid.size();
        int c = grid[0].size();
        for(int i = 0; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(grid[i][j] == '*')
                {
                    int ans = bfs(grid, r, c, i, j);
                    return ans;
                }
            }
        }
        return -1;
    }
};

/*
   0     1
 0[["O","*"],
 1["#","O"]]
    0    1   2   3   4   5
 0[["X","X","X","X","X","X"],
 1["X","*","O","O","O","X"],
 2["X","O","O","#","O","X"],
 3["X","X","X","X","X","X"]]
*/
