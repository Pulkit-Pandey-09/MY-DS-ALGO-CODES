class Solution {
public:
    
    void graphColor(vector<vector<int>>& adjL, vector<int>& color, int node, int rang)
    {
        color[node] = rang;
        for(auto child : adjL[node])
        {
            if(color[child] == -1) graphColor(adjL, color, child, rang);
        }
    }
    
    bool equationsPossible(vector<string>& eqn) 
    {
        vector<vector<int>> adjL(26);
        for(int i = 0; i < eqn.size(); i++)
        {
            if(eqn[i][1] == '=')
            {
                adjL[eqn[i][0]-'a'].push_back(eqn[i][3]-'a');
                if(eqn[i][0] != eqn[i][3])
                {
                    adjL[eqn[i][3]-'a'].push_back(eqn[i][0] - 'a');
                }
            }
        }
        vector<int> color(26,-1);
        int rang = 0;
        for(int i = 0; i < 26; i++)
        {
            if(adjL[i].size() != 0 && color[i] == -1) 
            {
                cout << i << endl;
                rang = rang + 1;
                graphColor(adjL, color, i, rang);
            }
        }
        for(int i = 0; i < eqn.size(); i++)
        {
            if(eqn[i][1] == '!')
            {
                if( (eqn[i][0] == eqn[i][3]) || color[eqn[i][0]-'a'] != -1 && (color[eqn[i][0]-'a'] == color[eqn[i][3] - 'a']))
                {
                    return false;
                }
            }
        }
        return true;
    }
};
