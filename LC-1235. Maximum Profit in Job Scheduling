//TLE SOLUTION --- NOT ABLE TO OPTIMISE
class Solution {
public:
    
    int bring(vector<vector<int>> &jobs, int n, int pos, vector<int> bd, vector<int> &dp)
    {
        if(dp[pos] != -1) return dp[pos];
        if(pos >= n) return 0;
        int incl = 0;
        int exl = 0;
        int nextIndex = lower_bound(bd.begin(), bd.end(), jobs[pos][1]) - bd.begin();
        incl = jobs[pos][2] + bring(jobs,n,nextIndex,bd,dp);
        exl = bring(jobs,n,pos+1,bd,dp);
        dp[pos] = max(incl,exl);
        return max(incl,exl);
    }
    
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) 
    {
        vector<vector<int>> jobs(profit.size());
        vector<int> dp(profit.size()+1,-1);
        vector<int> bd = {startTime.begin(),startTime.end()};
        sort(bd.begin(),bd.end());
        for(int i = 0; i < profit.size(); i++)
        {
            jobs[i].resize(3);
            jobs[i][0] = (startTime[i]);
            jobs[i][1] = (endTime[i]);
            jobs[i][2] = (profit[i]);
        }
        sort(jobs.begin(),jobs.end(),[](vector<int> &a, vector<int> &b){
            return a[0] < b[0];
        });
        int ans = bring(jobs,profit.size(),0,bd,dp);
        return ans;
    }
};
