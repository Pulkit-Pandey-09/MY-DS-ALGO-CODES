// bfs
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) 
    {
        vector<double> v;
        queue<TreeNode*> q;
        if(root)q.push(root);
        while(!q.empty())
        {
            int n = q.size();
            double count = 0, sum = 0;
            while(n--)
            {
                TreeNode* curr = q.front();
                q.pop();
                sum += curr->val;
                count += 1;
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
            v.push_back((double)(sum/count));
        }
        return v;
    }
};

// dfs
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root,int level,map<int,vector<int>>&m){
        if(!root){return;}
        m[level].push_back(root->val);
        dfs(root->left,level+1,m);
        dfs(root->right,level+1,m);
    }
    vector<double> averageOfLevels(TreeNode* root) {
        map<int,vector<int>>m;
        dfs(root,0,m);
        vector<double>res;
        for(auto i:m){
            double sum=accumulate(i.second.begin(),i.second.end(),0.0);
            res.push_back(sum/i.second.size());
        }
        return res;
    }
};
