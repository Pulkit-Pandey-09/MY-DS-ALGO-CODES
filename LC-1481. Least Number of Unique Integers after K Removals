class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) 
    {
        priority_queue<int,vector<int>, greater<int>> pq;
        unordered_map<int,int> up;
        for(int i = 0; i < arr.size(); i++)
        {
            up[arr[i]]++;   
        }
        for(auto x : up)
        {
            pq.push(x.second);
        }
        while(k>0)
        {
            int freq = pq.top();
            if(freq >= k)
            {
                freq -= k;
                k = 0;
            }
            else
            {
                k -= freq;
                freq = 0;
            }
            if(freq == 0) 
            {
                //cout << " HI";
                pq.pop();
            }
            else
            {
                pq.pop();
                pq.push(freq);
            }
        }
        return pq.size();
    }
};


// with custom comparator
class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) 
    {
        auto myCmp = [](int& a, int& b){
            return a > b;
        };
        priority_queue<int,vector<int>, decltype(myCmp)> pq(myCmp);
        unordered_map<int,int> up;
        for(int i = 0; i < arr.size(); i++)
        {
            up[arr[i]]++;   
        }
        for(auto x : up)
        {
            pq.push(x.second);
        }
        while(k>0)
        {
            int freq = pq.top();
            if(freq >= k)
            {
                freq -= k;
                k = 0;
            }
            else
            {
                k -= freq;
                freq = 0;
            }
            if(freq == 0) 
            {
                //cout << " HI";
                pq.pop();
            }
            else
            {
                pq.pop();
                pq.push(freq);
            }
        }
        return pq.size();
    }
};
