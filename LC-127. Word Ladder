class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) 
    {
        set<string> s = {wordList.begin(),wordList.end()};
        queue<string> q;
        set<string> vis;
        if(s.find(endWord) == s.end()) return 0;
        q.push(beginWord);
        vis.insert(beginWord);
        int level = 1;
        while(!q.empty())
        {
            int n = q.size();
            while(n--)
            {
                string curr = q.front();
                q.pop();
                for(int i = 0; i < curr.size(); i++)
                {
                    string temp = curr;
                    for(char c = 'a'; c <= 'z'; c++)
                    {
                        temp[i] = c;
                        if(temp == curr) continue;
                        else if(temp == endWord) return level + 1;
                        else if(s.find(temp) != s.end() && vis.find(temp) == vis.end())
                        {
                            q.push(temp);
                            vis.insert(temp);
                        }
                    }
                }
            }
            level++;
        }
        return 0;
    }
};
