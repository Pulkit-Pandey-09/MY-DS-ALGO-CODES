/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*class Solution {
public:
    // my approach
    int solve(TreeNode* root)
    {
        if(root == NULL)
        {
            return 0;
        }
        
        int leftNodeCount = solve(root->left);
        int rightNodeCount = solve(root->right);
        
        return 1 + leftNodeCount + rightNodeCount;
    }
    
    int countNodes(TreeNode* root) 
    {
        if(root == NULL) return 0;
        
        int ans = solve(root);
        return ans;
    }
};*/
class Solution {
    public:
 
      // sde skills approach  - complexity??
        int countNodes(TreeNode* root) {
            if(!root) return 0;
 
            int lh = 0, rh = 0;
            TreeNode *t = NULL;
 
            // Get Left height  -- O(log(n))
            t = root;
            while(t) {
                lh++;
                t = t->left;
            }
 
            // Get Right height  -- O(log(n))
            t = root;
            while(t) {
                rh++;
                t = t->right;
            }
 
            if(lh == rh) 
                return (pow(2,lh) - 1);  // 2^h-1
            else 
                return (1 + countNodes(root->left) + countNodes(root->right));
        }
};
