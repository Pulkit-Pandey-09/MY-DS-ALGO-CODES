class DSU
{
private:
    int N;
    vector<int>* par;
public:
    DSU(int N)
    {
        this-N = N;
        par = new vector<int>(N+1);
        for(int i = 0; i <= N; i++)
        {
            par[i] = i;
        }
    }

    void addEdge(int a, int b)
    {
        int root_a = find(a);
        int root_b = find(b);
        if(root_a != root_b)          // if root_a  == root_b , this means graph contains a cycle
        {
            par[root_b] = root_a;
        }
    }

    int find(int a)
    {
        while(par[a] != a)
        {
            a = par[a];
        }
        return a;
    }
};
