class Solution {
public:
    int method2(vector<vector<int>>&points) {
        int l = points.size();
        vector<vector<int>> ans;
        sort(points.begin(), points.end());
        //for(auto x : points) cout << x[0] << " " << x[1] << ",";
        cout << endl;
        for(int i = 0; i < l; i++) {
            if(ans.size() == 0) {
                ans.push_back(points[i]);
            }
            else {
                vector<int> prev = ans[ans.size()-1];
                // check overlapping part and update 
                if(prev[1] >= points[i][0]) {
                    ans[ans.size()-1][0] = min(prev[0], points[i][0]);  // (here it dosent matter to min or max)
                    ans[ans.size()-1][1] = min(prev[1], points[i][1]);    // Note here (to take min)
                }   
                else {
                    ans.push_back(points[i]);
                }
            }
        }
        return ans.size();
    }
    int findMinArrowShots(vector<vector<int>>& points) {
        return method2(points);
    }
};
