include<iostream>
#include<map>
#include<list>
using namespace std;
 
template<typename T>
class Graph{
    map<T,list<T> > l;
    public:
    void addEdge(int x,int y)
    {
        l[x].push_back(y);
        l[y].push_back(x);
    }
    void dfs_helper(T src, map<T,bool> &visited , int &cnt)
    {
        //cout<<src<<" ";
        visited[src]=true;
        for(T nbr:l[src])
        {
            if(!visited[nbr])
            {
				cnt = cnt+1;
                dfs_helper(nbr,visited,cnt);
            }
        }
    }
    void dfs(int n)
    {
        map<T,bool> visited;
        for(auto go:l)
        {
            visited[go.first]=false;
        }
        //dfs_helper(src,visited);
        int ans=0;
        for(auto j:l)
        {
           T node=j.first;
           int cnt = 0;
           if(!visited[node])
           {
              cnt=1;
               dfs_helper(node,visited,cnt);
               //cout << node << " " << cnt << endl;
               int x = (cnt*(cnt-1))/2;
              ans += x;
           }
        }
        //cout << (n*(n-1))/2 << " " <<ans << endl;
        cout<< (n*(n-1))/2 - ans<<endl;
    }
 
};
int main()
{
    Graph<int> g;
    int n,m;
    total_nodes = n;
    cin>>n>>m;
    int x,y;
 
    for(int i=0;i<m;i++)
    {
      cin>>x>>y;
      g.addEdge(x,y);
    }
    g.dfs(n);
   return 0;
}
