/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int result = INT_MIN;
    pair<int,int> solve(TreeNode* root)     // postorder traversal
    {
        if(!root) return {INT_MIN,INT_MAX};
        if(root->left == NULL && root->right == NULL) 
        {
            //cout << root->val << " ";
            return {root->val,root->val};
        }
        
        pair<int,int> l(INT_MIN,INT_MAX);  
        pair<int,int> r(INT_MIN,INT_MAX);
        
        l = solve(root->left);                   // left call
        r = solve(root->right);                  // right call
        
        pair<int,int> s(INT_MIN,INT_MAX);         // my root work
        s.first = max(l.first,r.first);
        s.second = min(l.second,r.second);
        
        result = max(result,max(abs(root->val-s.first),abs(root->val-s.second)));
        s.first = max(root->val,s.first);
        s.second = min(root->val,s.second);
        return s;
    }
    
    int maxAncestorDiff(TreeNode* root) 
    {
        solve(root);
        return result;
    }
};
