// recursion
class Solution0 {
public:

    int bring(vector<vector<int>>& grid, int r, int c, int i, int j)
    {
        if(i == r-1 && j == c-1) return grid[i][j];
        if(i >= r || j >= c) return INT_MAX;
    
        int d = INT_MAX;
        int ri = INT_MAX;
        d = bring(grid,r,c,i+1,j);
        ri = bring(grid,r,c,i,j+1);
        return grid[i][j] + min(d,ri);
    }
    
    int minPathSum(vector<vector<int>>& grid) 
    {
        int r = grid.size();
        int c = grid[0].size();
        int ans = bring(grid,r,c,0,0);
        return ans;
    }
};

// recursion with memo
class Solution1 {
public:

    int bring(vector<vector<int>>& grid, int r, int c, int i, int j, vector<vector<int>>& dp)
    {
        if(dp[i][j] != -1) return dp[i][j];
        if(i == r-1 && j == c-1) return dp[i][j] = grid[i][j];
        if(i >= r || j >= c) return dp[i][j] = INT_MAX;
    
        int d = INT_MAX;
        int ri = INT_MAX;
        d = bring(grid,r,c,i+1,j,dp);
        ri = bring(grid,r,c,i,j+1,dp);
        dp[i][j] = grid[i][j] + min(d,ri);
        return grid[i][j] + min(d,ri);
    }
    
    int minPathSum(vector<vector<int>>& grid) 
    {
        int r = grid.size();
        int c = grid[0].size();
        vector<vector<int>> dp(r+1,vector<int>(c+1,-1));
        int ans = bring(grid,r,c,0,0,dp);
        return ans;
    }
};

// recursion with memeo using offSet
class Solution2 {
public:
    vector<vector<int>> offSet  ={{1,0},{0,1}};
    int bring(vector<vector<int>>& grid, int r, int c, int i, int j, vector<vector<int>>& dp)
    {
        if(dp[i][j] != -1) return dp[i][j];
        if(i == r-1 && j == c-1) return dp[i][j] = grid[i][j];
        if(i >= r || j >= c) return dp[i][j] = INT_MAX;
        int ans = INT_MAX;
        for(int k = 0; k < offSet.size(); k++)
        {
            ans = min(ans,bring(grid,r,c,i+offSet[k][0],j+offSet[k][1],dp));
        }
        dp[i][j] = grid[i][j] + ans;
        return grid[i][j] + ans;
    }
    
    int minPathSum(vector<vector<int>>& grid) 
    {
        int r = grid.size();
        int c = grid[0].size();
        vector<vector<int>> dp(r+1,vector<int>(c+1,-1));
        int ans = bring(grid,r,c,0,0,dp);
        return ans;
    }
};

// bottom up dp
class Solution3 {
public:
    
    int minPathSum(vector<vector<int>>& grid) 
    {
        int r = grid.size();
        int c = grid[0].size();
        vector<vector<int>> dp(r,vector<int>(c,0));
        dp[r-1][c-1] = grid[r-1][c-1];
        for(int j = c-2; j >= 0; j--)
        {
            dp[r-1][j] = grid[r-1][j] + dp[r-1][j+1];
        }
        for(int i = r-2; i >= 0; i--)
        {
            dp[i][c-1] = grid[i][c-1] + dp[i+1][c-1];
        }
        for(int i = r-2; i >= 0; i--)
        {
            for(int j = c-2; j >= 0; j--)
            {
                dp[i][j] = grid[i][j] + min(dp[i+1][j],dp[i][j+1]);
            }
        }
        return dp[0][0];
    }
};
