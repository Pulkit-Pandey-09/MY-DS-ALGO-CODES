/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
 
    ListNode *FindNode(ListNode *slow , ListNode *fast , ListNode *head)   // aplying flyod to detect starting of cycle
    {
        slow = head;
        if(slow == fast)
        {
            return slow;
        }
        while(slow != NULL && fast != NULL)
        {
            slow = slow->next;
            fast = fast->next;
 
            if(slow == fast)
            {
                return slow;
            }
        }
        return NULL;
    }
 
    ListNode *detectCycle(ListNode *head) 
    {
        ListNode* slow = head;
        ListNode* fast = head;
 
        while(slow != NULL && fast != NULL && fast->next != NULL)    
        {
            slow = slow->next;
            fast = fast->next->next;
 
            if(slow == fast)  // cycle detected
            {
                head = FindNode(slow,fast,head);          // find the starting point of cyle
                return head;
            }
        }
        return NULL;
    }
};
