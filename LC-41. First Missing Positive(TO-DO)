// Approach-1: Put the number in its own position
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        if(n==0) return 1;
        for(int i=0; i<n; i++) {
            // Put the number in its own position(i.e. number-1)
            while(nums[i] > 0 && nums[i] <= n && \
                  nums[i] != i+1 && \
                  nums[nums[i]-1]!= nums[i]) {
                // NOTE: "nums[i] != nums[nums[i]-1]" for Duplicate Number Check, to avoids cycle
                swap(nums[i], nums[nums[i]-1]);
            }
        }
 
        for(int i=0; i<n; i++)
            if(nums[i] != i+1) return i+1;
        return n+1; // No missing number
    }
};
 
 
//Approach-2: Use -ve sign
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        bool onePresent = false;
        for(auto &n : nums) {
            if(n == 1) onePresent = true;
            if(n <= 0) n = 1;       // IMP NOTE
        }
        if(onePresent == false)
            return 1;
 
        for(auto n : nums) {
            int k = abs(n);
            if(k <= nums.size() && nums[k-1] > 0)
                nums[k-1] = -abs(nums[k-1]);
        }
 
        for(int i=1; i<nums.size(); i++) {
            if(nums[i] > 0)
                return i+1;
        }
 
        return nums.size()+1;
    }
};
