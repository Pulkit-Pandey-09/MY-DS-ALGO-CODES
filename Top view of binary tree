/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 
    void solve(TreeNode* root, int level, int hd, map<int,pair<int,int>> &mp)
    {
        if(!root) return;
        if(mp.find(hd) == mp.end() || level <= mp[hd].second)
        {
            mp[hd].first = root->val;
            mp[hd].second = level;
        }
 
        solve(root->left,level+1,hd-1,mp);
        solve(root->right,level+1,hd+1,mp);
    }
 
    int findBottomLeftValue(TreeNode* root) 
    {
        map<int,pair<int,int>> mp; // hd,(node->val,level)
        solve(root,0,0,mp);
        for(auto val:mp)
        {
            cout<<val.second.first<<" ";
        }
        return 0;
    }
};
